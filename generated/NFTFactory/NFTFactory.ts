// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class NFTCreated extends ethereum.Event {
  get params(): NFTCreated__Params {
    return new NFTCreated__Params(this);
  }
}

export class NFTCreated__Params {
  _event: NFTCreated;

  constructor(event: NFTCreated) {
    this._event = event;
  }

  get nftCA(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NFTRegesitered extends ethereum.Event {
  get params(): NFTRegesitered__Params {
    return new NFTRegesitered__Params(this);
  }
}

export class NFTRegesitered__Params {
  _event: NFTRegesitered;

  constructor(event: NFTRegesitered) {
    this._event = event;
  }

  get nftCA(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NFTFactory extends ethereum.SmartContract {
  static bind(address: Address): NFTFactory {
    return new NFTFactory("NFTFactory", address);
  }

  deployNFT(
    name: string,
    symbol: string,
    baseURI: string,
    maxSupply: BigInt,
  ): Address {
    let result = super.call(
      "deployNFT",
      "deployNFT(string,string,string,uint256):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromString(baseURI),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
      ],
    );

    return result[0].toAddress();
  }

  try_deployNFT(
    name: string,
    symbol: string,
    baseURI: string,
    maxSupply: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployNFT",
      "deployNFT(string,string,string,uint256):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromString(baseURI),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployNFTCall extends ethereum.Call {
  get inputs(): DeployNFTCall__Inputs {
    return new DeployNFTCall__Inputs(this);
  }

  get outputs(): DeployNFTCall__Outputs {
    return new DeployNFTCall__Outputs(this);
  }
}

export class DeployNFTCall__Inputs {
  _call: DeployNFTCall;

  constructor(call: DeployNFTCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get baseURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DeployNFTCall__Outputs {
  _call: DeployNFTCall;

  constructor(call: DeployNFTCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RegesiterNFTCall extends ethereum.Call {
  get inputs(): RegesiterNFTCall__Inputs {
    return new RegesiterNFTCall__Inputs(this);
  }

  get outputs(): RegesiterNFTCall__Outputs {
    return new RegesiterNFTCall__Outputs(this);
  }
}

export class RegesiterNFTCall__Inputs {
  _call: RegesiterNFTCall;

  constructor(call: RegesiterNFTCall) {
    this._call = call;
  }

  get nftCA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegesiterNFTCall__Outputs {
  _call: RegesiterNFTCall;

  constructor(call: RegesiterNFTCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
